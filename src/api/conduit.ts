/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/tags": {
    /** Get tags. Auth not required */
    get: operations["GetTags"]
  }
  "/users": {
    /** Register a new user */
    post: operations["CreateUser"]
  }
  "/users/login": {
    /** Login for existing user */
    post: operations["Login"]
  }
  "/user": {
    /** Gets the currently logged-in user */
    get: operations["GetCurrentUser"]
    /** Updated user information for current user */
    put: operations["UpdateCurrentUser"]
  }
  "/profiles/celeb_{username}": {
    /** Get a profile of a user of the system. Auth is optional */
    get: operations["GetProfileByUsername"]
  }
  "/profiles/celeb_{username}/follow": {
    /** Follow a user by username */
    post: operations["FollowUserByUsername"]
    /** Unfollow a user by username */
    delete: operations["UnfollowUserByUsername"]
  }
  "/articles": {
    /** Get most recent articles globally. Use query parameters to filter results. Auth is optional */
    get: operations["GetArticles"]
    /** Create an article. Auth is required */
    post: operations["CreateArticle"]
  }
  "/articles/feed": {
    /** Get most recent articles from users you follow. Use query parameters to limit. Auth is required */
    get: operations["GetArticlesFeed"]
  }
  "/articles/{slug}": {
    /** Get an article. Auth not required */
    get: operations["GetArticle"]
    /** Update an article. Auth is required */
    put: operations["UpdateArticle"]
    /** Delete an article. Auth is required */
    delete: operations["DeleteArticle"]
  }
  "/articles/{slug}/favorite": {
    /** Favorite an article. Auth is required */
    post: operations["CreateArticleFavorite"]
    /** Unfavorite an article. Auth is required */
    delete: operations["DeleteArticleFavorite"]
  }
  "/articles/{slug}/comments": {
    /** Get the comments for an article. Auth is optional */
    get: operations["GetArticleComments"]
    /** Create a comment for an article. Auth is required */
    post: operations["CreateArticleComment"]
  }
  "/articles/{slug}/comments/{commentId}": {
    /** Delete a comment for an article. Auth is required */
    delete: operations["DeleteArticleComment"]
  }
}

export interface components {
  schemas: {
    SingleArticleResponse: {
      article: components["schemas"]["Article"]
    }
    MultipleCommentsResponse: {
      comments: components["schemas"]["Comment"][]
    }
    NewUserRequest: {
      user: components["schemas"]["NewUser"]
    }
    NewArticleRequest: {
      article: components["schemas"]["NewArticle"]
    }
    Profile: {
      username: string
      bio: string
      image: string
      following: boolean
    }
    Article: {
      title: string
      slug: string
      description: string
      body: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
      tagList: string[]
      author: components["schemas"]["Profile"]
      favorited: boolean
      favoritesCount: number
    }
    UpdateUserRequest: {
      user: components["schemas"]["UpdateUser"]
    }
    NewComment: {
      body: string
    }
    SingleCommentResponse: {
      comment: components["schemas"]["Comment"]
    }
    ProfileResponse: {
      profile: components["schemas"]["Profile"]
    }
    LoginUserRequest: {
      user: components["schemas"]["LoginUser"]
    }
    UpdateArticle: {
      title?: string
      description?: string
      body?: string
    }
    Comment: {
      id: number
      body: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
      author: components["schemas"]["Profile"]
    }
    NewUser: {
      email: string
      password: string
      username: string
    }
    MultipleArticlesResponse: {
      articles: components["schemas"]["Article"][]
      articlesCount: number
    }
    UpdateUser: {
      username?: string
      email?: string
      bio?: string
      image?: string
    }
    NewArticle: {
      title: string
      description: string
      body: string
      tagList?: string[]
    }
    User: {
      username: string
      email: string
      bio: string
      image: string
      token: string
    }
    UserResponse: {
      user: components["schemas"]["User"]
    }
    UpdateArticleRequest: {
      article: components["schemas"]["UpdateArticle"]
    }
    NewCommentRequest: {
      comment: components["schemas"]["NewComment"]
    }
    LoginUser: {
      email: string
      password: string
    }
    TagsResponse: {
      tags: string[]
    }
  }
  responses: {
    /** Validation errors */
    ErrorValidation: {
      content: {
        "application/json": {
          /** @example The given data was invalid. */
          message?: string
          /** @example [object Object] */
          errors?: { [key: string]: string[] }
        }
      }
    }
    /** Success */
    "": {
      content: {
        "application/json": components["schemas"]["UserResponse"]
      }
    }
  }
}

export interface operations {
  /** Get tags. Auth not required */
  GetTags: {
    responses: {
      /** Success */
      200: {
        content: {
          "application/json": components["schemas"]["TagsResponse"]
        }
      }
    }
  }
  /** Register a new user */
  CreateUser: {
    responses: {
      200: components["responses"]
      422: components["responses"]["ErrorValidation"]
    }
    /** Details of the new user to register */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewUserRequest"]
      }
    }
  }
  /** Login for existing user */
  Login: {
    responses: {
      200: components["responses"]
      422: components["responses"]["ErrorValidation"]
    }
    /** Details of the new user to register */
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginUserRequest"]
      }
    }
  }
  /** Gets the currently logged-in user */
  GetCurrentUser: {
    responses: {
      200: components["responses"]
    }
  }
  /** Updated user information for current user */
  UpdateCurrentUser: {
    responses: {
      200: components["responses"]
      422: components["responses"]["ErrorValidation"]
    }
    /** User details to update. At least one field is required. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserRequest"]
      }
    }
  }
  /** Get a profile of a user of the system. Auth is optional */
  GetProfileByUsername: {
    parameters: {
      path: {
        /** Username of the profile to get */
        username: string
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          "application/json": components["schemas"]["ProfileResponse"]
        }
      }
    }
  }
  /** Follow a user by username */
  FollowUserByUsername: {
    parameters: {
      path: {
        /** Username of the profile you want to follow */
        username: string
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          "application/json": components["schemas"]["ProfileResponse"]
        }
      }
    }
  }
  /** Unfollow a user by username */
  UnfollowUserByUsername: {
    parameters: {
      path: {
        /** Username of the profile you want to unfollow */
        username: string
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          "application/json": components["schemas"]["ProfileResponse"]
        }
      }
    }
  }
  /** Get most recent articles globally. Use query parameters to filter results. Auth is optional */
  GetArticles: {
    parameters: {
      query: {
        /** Limit number of articles returned (default is 20) */
        limit?: number
        /** Offset/skip number of articles (default is 0) */
        offset?: number
        /** Filter by author (username) */
        author?: string
        /** Filter by favorites of a user (username) */
        favorited?: string
        /** Filter by tag */
        tag?: string
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          "application/json": components["schemas"]["MultipleArticlesResponse"]
        }
      }
    }
  }
  /** Create an article. Auth is required */
  CreateArticle: {
    responses: {
      /** Success */
      200: {
        content: {
          "application/json": components["schemas"]["SingleArticleResponse"]
        }
      }
      422: components["responses"]["ErrorValidation"]
    }
    /** Article to create */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewArticleRequest"]
      }
    }
  }
  /** Get most recent articles from users you follow. Use query parameters to limit. Auth is required */
  GetArticlesFeed: {
    parameters: {
      query: {
        /** Limit number of articles returned (default is 20) */
        limit?: number
        /** Offset/skip number of articles (default is 0) */
        offset?: number
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          "application/json": components["schemas"]["MultipleArticlesResponse"]
        }
      }
    }
  }
  /** Get an article. Auth not required */
  GetArticle: {
    parameters: {
      path: {
        /** Slug of the article to get */
        slug: string
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          "application/json": components["schemas"]["SingleArticleResponse"]
        }
      }
    }
  }
  /** Update an article. Auth is required */
  UpdateArticle: {
    parameters: {
      path: {
        /** Slug of the article to update */
        slug: string
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          "application/json": components["schemas"]["SingleArticleResponse"]
        }
      }
      422: components["responses"]["ErrorValidation"]
    }
    /** Article to update */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateArticleRequest"]
      }
    }
  }
  /** Delete an article. Auth is required */
  DeleteArticle: {
    parameters: {
      path: {
        /** Slug of the article to delete */
        slug: string
      }
    }
    responses: {
      /** Success */
      204: never
    }
  }
  /** Favorite an article. Auth is required */
  CreateArticleFavorite: {
    parameters: {
      path: {
        /** Slug of the article that you want to favorite */
        slug: string
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          "application/json": components["schemas"]["SingleArticleResponse"]
        }
      }
    }
  }
  /** Unfavorite an article. Auth is required */
  DeleteArticleFavorite: {
    parameters: {
      path: {
        /** Slug of the article that you want to unfavorite */
        slug: string
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          "application/json": components["schemas"]["SingleArticleResponse"]
        }
      }
    }
  }
  /** Get the comments for an article. Auth is optional */
  GetArticleComments: {
    parameters: {
      path: {
        /** Slug of the article that you want to get comments for */
        slug: string
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          "application/json": components["schemas"]["MultipleCommentsResponse"]
        }
      }
    }
  }
  /** Create a comment for an article. Auth is required */
  CreateArticleComment: {
    parameters: {
      path: {
        /** Slug of the article that you want to create a comment for */
        slug: string
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          "application/json": components["schemas"]["SingleCommentResponse"]
        }
      }
      422: components["responses"]["ErrorValidation"]
    }
    /** Comment you want to create */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewCommentRequest"]
      }
    }
  }
  /** Delete a comment for an article. Auth is required */
  DeleteArticleComment: {
    parameters: {
      path: {
        /** Slug of the article that you want to delete a comment for */
        slug: string
        /** ID of the comment you want to delete */
        commentId: string
      }
    }
    responses: {
      /** Success */
      204: never
    }
  }
}

export interface external {}
